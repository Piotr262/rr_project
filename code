
library(shiny)
library(dplyr)
library(ggplot2)

data<-readRDS("beijing_super_clean.rds")
data<-data[,-c(1:2,4,10,11,12,14,15,17:18,20,23,24)]
data<-na.omit(data)
str(data$renovationCondition)
data$renovationCondition <- as.factor(data$renovationCondition)
data$renovationCondition <- factor(data$renovationCondition,
                                   levels=c("1","2","3","4"),
                                   labels=c("Other","Rough","Simplicity","Hardcover"))

data$elevator <- as.factor(data$elevator)
data$elevator <- factor(data$elevator,
                        levels=c("0","1"),
                        labels=c("No","Yes"))

data$subway <- as.factor(data$subway)
data$subway <- factor(data$subway,
                      levels=c("0","1"),
                      labels=c("No","Yes"))

# Define User interface
ui <- fluidPage(
    # Application title
    titlePanel("Buy a house in Beijing"),
    theme = shinythemes::shinytheme("flatly"),
    sidebarLayout(
        sidebarPanel(
            # Inputs here:
            selectInput('elevator', 
                        'Select whether has elevator:', 
                        choices = c("No","Yes"),"Yes"),
            selectInput('renovationCondition', 
                        'Select the renovarion condition:', 
                        choices = c("Other","Rough","Simplicity","Hardcover"),"Simplicity"),
            selectInput('subway', 
                        'Select whether has subway station nearby:', 
                        choices = c("No","Yes"),"Yes"),
            
            sliderInput("district",
                        "Select district index number:",
                        min = 1,
                        max = 13,
                        value = 1),
            
            sliderInput("totalPrice",
                        "Choose a range of total price:",
                        min = 50004,
                        max = 24980007,
                        value = c(50004,24980007)),
            
            sliderInput("square",
                        "Choose a range of square:",
                        min = 9,
                        max = 250,
                        value = c(60,100)),
            
            sliderInput("building_age", "Choose a range of building's age:",
                           min=2,
                           max=85,
                           value = c(29,65)),
            
            dateRangeInput("tradeTime", "Choose a date range:",
                           start = "2010-01-05",
                           end = "2018-01-28")
            
        ),
        
        # Show a plot of the generated distribution
        mainPanel(
            # Output here:
            DT::DTOutput('table_top_10_followers'),
            plotly::plotlyOutput('price_according_to_time')
            
        )
    )
)

# Define server logic
server <- function(input, output) {
    
    top_10_followers <- function(){
        data %>% 
            filter(district == input$district) %>%
            filter(renovationCondition==input$renovationCondition) %>%
            filter(building_age == input$building_age) %>%
            filter(elevator==input$elevator) %>%
            filter(subway==input$subway) %>%
            filter(totalPrice<=input$totalPrice[2]) %>%
            filter(totalPrice>=input$totalPrice[1]) %>%
            filter(square<=input$square[2]) %>%
            filter(square>=input$square[1]) %>%
            filter(tradeTime<=input$tradeTime[2]) %>%
            filter(tradeTime>=input$tradeTime[1])
    }
    
    price_time_trends <- function(){
        data %>% 
            filter(district == input$district) %>% 
            filter(renovationCondition==input$renovationCondition) %>%
            filter(building_age == input$building_age) %>%
            filter(elevator==input$elevator) %>%
            filter(subway==input$subway) %>%
            filter(totalPrice<=input$totalPrice[2]) %>%
            filter(totalPrice>=input$totalPrice[1]) %>%
            filter(square<=input$square[2]) %>%
            filter(square>=input$square[1]) %>%
            filter(tradeTime<=input$tradeTime[2]) %>%
            filter(tradeTime>=input$tradeTime[1]) %>%
            ggplot(aes(x = tradeTime, y = price)) +
            geom_col()+
            ggtitle("The housing price trend among each district")
    }
    
   
    # MODIFY CODE BELOW: Render a DT output named "table_top_10_names"
    output$table_top_10_followers <- DT::renderDT({
        DT::datatable(top_10_followers())
    })
    output$price_according_to_time<-plotly::renderPlotly({
        price_time_trends()
    })

}

# Run the application 
shinyApp(ui = ui, server = server)

